[alias]
    # pretty log
    lg = log --graph --pretty='format:%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

    # status
    st = status

    # branch (verbose)
    br = branch -v

    # branch (verbose) -D
    bd = branch -v -D

    # branch (verbose) -a
    ba = branch -v -a

    # branch -m
    bm = branch -m

    # cleanup local branches after they have been merged
    cleanup = "!git branch --merged | grep  -v '\\*\\|master\\|develop' | xargs -n 1 git branch -d"

    # checkout
    co = checkout

    # co -b
    cob = checkout -b

    # co master
    com = checkout master

    # commit
    ci = commit --verbose

    # add -u + commit
    cu = !"git add -u; git commit"

    # ci -v
    civ = commit -v

    # ci -m
    cim = commit -m

    # amend your last commit
    amend = commit --amend --verbose

    # add -u
    adu = add -u

    # stash pop
    pop = stash pop

    # stash -u
    stu = stash -u

    # working in progress commit
    unwip = !"git log -n 1 | grep -q -c wip && git reset HEAD~1"
    wip = !"git add -A; git ls-files --deleted -z | xargs -0 git rm; git commit -m \"wip\" --no-verify"

    # undo
    undo = reset --soft HEAD^

    # undo + reset
    unset = !"git undo; git reset"

    # rebase
    rb = rebase
    ri = rebase --interactive --autosquash
    rim = rebase --interactive --autosquash master
    rbm = rebase master

    # rebase --continue
    rbc = !"git add .; git rebase --continue"

    # rebase --abort
    rba = rebase --abort

    # fixup
    fixup = !sh -c 'git commit -m \"fixup! $(git log -1 --format='\\''%s'\\'' $@)\"' -

    # show commited files
    showf = diff-tree --no-commit-id --name-only -r

    # push -f
    puf = push -f

    # update
    update = !git fo && git reset --hard origin/master && git pull

    # fetch origin and rebase -i with origin/master
    fri = !git fetch origin && git rebase --interactive --autosquash origin/master

    # fetch origin
    fo = !git fetch origin

    # fetch upstream
    fu = !git fetch upstream

    # fetch origin and rebase with origin/master
    fro = !git fetch origin && git rebase origin/master

    # fetch upstream and rebase with upstream/master
    fru = !git fetch upstream && git rebase upstream/master

    # find lost commits
    lost = !"git fsck | awk '/dangling commit/ {print $3}' | git show --format='SHA1: %C(yellow)%h%Creset %f' --stdin | awk '/SHA1/ {sub(\"SHA1: \", \"\"); print}'"

[apply]
    whitespace = fix

[branch]
    autosetuprebase = always

[branch "master"]
    remote = origin
    merge = refs/heads/master

[pull]
    rebase = preserve

[color]
    diff = auto
    interactive = auto
    status = auto
    ui = auto

[core]
    attributesfile = ~/.gitattributes
	  autocrlf = false
    editor = vim
    excludesfile = ~/.gitignore
    quotepath = false
    safecrlf = true
    whitespace = cr-at-eol,space-before-tab,-indent-with-non-tab,trailing-space

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold # line info
    old = red # deletions
    new = green # additions

[color "status"]
    added = green
    changed = yellow
    untracked = cyan

[diff]
    renames = copies
    tool = vimdiff
    # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
    # instead of a/b/c/d as prefixes for patches
    mnemonicprefix = true
    algorithm = patience

[difftool]
    prompt = false

[fetch]
    prune = true

[format]
    pretty = %Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset

[hub]
    protocol = https

[mergetool]
    keepBackup = false

[rebase]
    autosquash = true
    autostash = true
    stat = true

[rerere]
    enabled = 1
    autoupdate = true

[status]
    showUntrackedFiles = all

[push]
    default = simple
    followTags = true

[tag]
    sort = version:refname
